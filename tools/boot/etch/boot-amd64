#!/bin/bash
#
# Do install stuff for amd64, including making bootable CDs
# Works with debian-installer
#
# $1 is the CD number
# $2 is the temporary CD build dir

. $BASEDIR/tools/boot/$DI_CODENAME/common.sh

set -e

N=$1
CDDIR=$2
BOOTDIR=

echo "DI_WWW_HOME is $DI_WWW_HOME"
echo "DI_DIR is $DI_DIR"

if [ "$DI_WWW_HOME" = "default" ];then
   DI_WWW_HOME="http://people.debian.org/~kroeckx/d-i/images/daily"
   if [ -n "$DI_DIR" ];then
      DI_DIR="$DI_DIR/~${DI_WWW_HOME#*~}"
      DI_WWW_HOME=""
      echo "Using images from $DI_DIR"
   fi
fi
if [ ! "$DI_DIST" ]; then
   DI_DIST="$DI_CODENAME"
fi

cd $CDDIR/..

# This script is called with $1 (now $N) as the CD to 
# make bootable.  N may be in the form "n" or "n_NONUS"
# There may be more than 4 disks...support extras.

# Strip NONUS part of disk number
# NN will be 1...N so it can be used as an index
NN=`echo $N | sed -e 's/_NONUS//'`

if [ "$NN" != "1" ]; then
  echo "CD$NN is not bootable"
  exit 0
fi

BOOT_IMAGES="cdrom/initrd.gz cdrom/vmlinuz cdrom/debian-cd_info.tar.gz"


# Download boot images.
for image in $BOOT_IMAGES; do
    if [ ! -e "$image" ]; then
	dir=$(dirname $image)
	mkdir -p $dir
	if [ -n "$LOCAL"  -a -f "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" ]; then
		cp "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" "$image"
	elif [ ! "$DI_WWW_HOME" ];then
		if [ ! "$DI_DIR" ];then
		   DI_DIR="$MIRROR/dists/$DI_DIST/main/installer-$ARCH/current/images"
		fi
                echo "Copying images from $DI_DIR"
		cp "$DI_DIR/$image" "$image"
	else
		wget "$DI_WWW_HOME/$image" -O "$image"
	fi
    fi
done

echo "Using ISOLINUX boot-disks image on CD$N"
mkdir -p boot$N/isolinux
cp -f $BASEDIR/data/$DI_CODENAME/isolinux.bin boot$N/isolinux/
cp -lf cdrom/vmlinuz $CDDIR/install/
cp -lf cdrom/initrd.gz $CDDIR/install/
echo -n "-cache-inodes -J -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table " > $N.mkisofs_opts

syslinux_files () {
	type=$1

	mv boot$N/isolinux/f3.txt.$type boot$N/isolinux/f3.txt
	mv boot$N/isolinux/f4.txt.$type boot$N/isolinux/f4.txt
	mv boot$N/isolinux/isolinux.cfg.$type boot$N/isolinux/isolinux.cfg
}

extra_image () {
	image=$1
	dir=$(dirname "$image")

	if [ ! -e "$image" ]; then
		mkdir -p $dir
		if [ ! "$DI_WWW_HOME" ];then
			if [ ! "$DI_DIR" ];then
				DI_DIR="$MIRROR/dists/$DI_DIST/main/installer-$ARCH/current/images"
			fi
			cp "$DI_DIR/cdrom/$image" "$image"
		else
			wget "$DI_WWW_HOME/cdrom/$image" -O "$image"
		fi
	fi

	if [ ! -d $CDDIR/install/$dir ]; then
		mkdir -p $CDDIR/install/$dir
	fi
	cp -a "$image" $CDDIR/install/$dir/
}

# Include Smart Boot Manager image for people where isolinux fails
gzip -dc $BASEDIR/data/$DI_CODENAME/sbm.bin.gz > $CDDIR/install/sbm.bin
# Keep the original file timestamp
touch -r $BASEDIR/data/$DI_CODENAME/sbm.bin.gz $CDDIR/install/sbm.bin
cp -p $BASEDIR/data/$DI_CODENAME/README.sbm $CDDIR/install/

# Isolinux setup including config and help files comes from d-i.
cat cdrom/debian-cd_info.tar.gz | (cd boot$N/isolinux/; tar zx)
if [ -e boot$N/isolinux/f3.txt.withgtk ]; then
	extra_image gtk/initrd.gz
	syslinux_files withgtk
fi
rm -f boot$N/isolinux/isolinux.cfg.with* 2>/dev/null || true

if [ "$SPLASHPNG" ] ; then
	# Insert our own splash screen.  Color index 0 is
	# background, and index 7 is foreground.  Set to black and
	# white respecively
	pngtopnm < $SPLASHPNG | ppmquant 16 | \
		ppmtolss16 "#ffffff=7" "#000000=0" > boot$N/isolinux/splash.rle
fi

if [ -n "$KERNEL_PARAMS" ]; then
	# Substitute custom kernel params into the isolinux config
	# file.
	sed -i "s|append |append $KERNEL_PARAMS |" boot$N/isolinux/isolinux.cfg
fi

if [ -n "$ISOLINUX_DEFAULT" ]; then
    sed -i "s/^DEFAULT .*$/DEFAULT $ISOLINUX_DEFAULT/" boot$N/isolinux/isolinux.cfg
fi

# Add autorun if we have README.html

if [ -f $CDDIR/README.html ]; then
	todos > $CDDIR/autorun.inf <<EOF
[autorun]
open=autorun.bat
EOF
	todos > $CDDIR/autorun.bat <<EOF
@echo Starting "README.html"...
@start README.html
@exit
EOF
fi

# write final lines to mkisofs_opts
echo -n "boot$N " >> $N.mkisofs_opts

# th,th, thats all
